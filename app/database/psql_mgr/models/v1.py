# pylint: disable=too-many-lines
from dataclasses import dataclass
from datetime import datetime, date
from enum import Enum
from typing import Optional
from uuid import UUID

from pydantic import BaseModel

""" This class is autogenerated """


class m_AccessLevels(str, Enum):
    ADMIN = "ADMIN"
    USER = "USER"


class m_StorageStatus(str, Enum):
    AVAILABLE = "AVAILABLE"
    DELETED = "DELETED"
    NEVER_EXISTED = "NEVER_EXISTED"


class m_AccountType(str, Enum):
    ASSET_LONGTERM = "ASSET_LONGTERM"
    ASSET_SHORTTERM = "ASSET_SHORTTERM"
    ASSET_PREPAY = "ASSET_PREPAY"
    EXPENSE_OPERATING = "EXPENSE_OPERATING"
    INCOME = "INCOME"
    EQUITY = "EQUITY"
    LIABILITY = "LIABILITY"
    RETAINED_EARNINGS = "RETAINED_EARNINGS"
    INCOME_SUMMARY = "INCOME_SUMMARY"


class m_AccountPermanence(str, Enum):
    PERMANENT = "PERMANENT"
    TEMPORARY = "TEMPORARY"


class m_AccountActions(str, Enum):
    DEBIT = "DEBIT"
    CREDIT = "CREDIT"


class m_Person(BaseModel):
    id: Optional[UUID] = None
    hashed_password: str
    active: Optional[bool] = None
    first_name: str
    last_name: str
    email: str
    level: Optional[m_AccessLevels] = None


class m_Entity(BaseModel):
    id: Optional[UUID] = None
    name: str


class m_PersonEntityJunction(BaseModel):
    user_id: Optional[UUID] = None
    entity_id: Optional[UUID] = None


class m_Account(BaseModel):
    id: Optional[UUID] = None
    entity_id: Optional[UUID] = None
    name: str
    parent_account_id: Optional[UUID] = None
    archived: Optional[bool] = None
    type: m_AccountType
    permanence: m_AccountPermanence


class m_Journal(BaseModel):
    id: Optional[UUID] = None
    timestamp: date
    created_by: Optional[UUID] = None
    entity_id: Optional[UUID] = None
    description: str
    receipt_status: Optional[m_StorageStatus] = None


class m_Ledger(BaseModel):
    id: Optional[UUID] = None
    journal_id: UUID
    account_id: UUID
    amount: float
    direction: m_AccountActions
    reconciled: Optional[bool] = None


class m_Prepaid(BaseModel):
    id: Optional[UUID] = None
    amount: float
    receive_month: date
    processed: Optional[bool] = None
    original_journal_id: Optional[UUID] = None
    asset_account_id: UUID
    expense_account_id: UUID
    asset_account_type: m_AccountType
    expense_account_type: m_AccountType


@dataclass(frozen=True)
class c_AccessLevels:
    ADMIN = "ADMIN"
    USER = "USER"


@dataclass(frozen=True)
class c_StorageStatus:
    AVAILABLE = "AVAILABLE"
    DELETED = "DELETED"
    NEVER_EXISTED = "NEVER_EXISTED"


@dataclass(frozen=True)
class c_AccountType:
    ASSET_LONGTERM = "ASSET_LONGTERM"
    ASSET_SHORTTERM = "ASSET_SHORTTERM"
    ASSET_PREPAY = "ASSET_PREPAY"
    EXPENSE_OPERATING = "EXPENSE_OPERATING"
    INCOME = "INCOME"
    EQUITY = "EQUITY"
    LIABILITY = "LIABILITY"
    RETAINED_EARNINGS = "RETAINED_EARNINGS"
    INCOME_SUMMARY = "INCOME_SUMMARY"


@dataclass(frozen=True)
class c_AccountPermanence:
    PERMANENT = "PERMANENT"
    TEMPORARY = "TEMPORARY"


@dataclass(frozen=True)
class c_AccountActions:
    DEBIT = "DEBIT"
    CREDIT = "CREDIT"


@dataclass(frozen=True)
class c_Person:
    id = "person.id"
    hashed_password = "person.hashed_password"
    active = "person.active"
    first_name = "person.first_name"
    last_name = "person.last_name"
    email = "person.email"
    level = "person.level"


@dataclass(frozen=True)
class c_Entity:
    id = "entity.id"
    name = "entity.name"


@dataclass(frozen=True)
class c_PersonEntityJunction:
    user_id = "person_entity_junction.user_id"
    entity_id = "person_entity_junction.entity_id"


@dataclass(frozen=True)
class c_Account:
    id = "account.id"
    entity_id = "account.entity_id"
    name = "account.name"
    parent_account_id = "account.parent_account_id"
    archived = "account.archived"
    type = "account.type"
    permanence = "account.permanence"


@dataclass(frozen=True)
class c_Journal:
    id = "journal.id"
    timestamp = "journal.timestamp"
    created_by = "journal.created_by"
    entity_id = "journal.entity_id"
    description = "journal.description"
    receipt_status = "journal.receipt_status"


@dataclass(frozen=True)
class c_Ledger:
    id = "ledger.id"
    journal_id = "ledger.journal_id"
    account_id = "ledger.account_id"
    amount = "ledger.amount"
    direction = "ledger.direction"
    reconciled = "ledger.reconciled"


@dataclass(frozen=True)
class c_Prepaid:
    id = "prepaid.id"
    amount = "prepaid.amount"
    receive_month = "prepaid.receive_month"
    processed = "prepaid.processed"
    original_journal_id = "prepaid.original_journal_id"
    asset_account_id = "prepaid.asset_account_id"
    expense_account_id = "prepaid.expense_account_id"
    asset_account_type = "prepaid.asset_account_type"
    expense_account_type = "prepaid.expense_account_type"
